package nz.ac.auckland.netlogin.negotiation;

import nz.ac.auckland.netlogin.NetLoginPreferences;
import org.ietf.jgss.*;

import javax.security.auth.login.LoginException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

public class GSSAPIAuthenticator implements Authenticator {

    private final Oid KRB5_MECHANISM;
	private final Oid KRB5_PRINCIPAL_NAME_TYPE;
    private final GSSManager manager;
    private GSSContext context;

    public GSSAPIAuthenticator() throws GSSException {
        KRB5_MECHANISM = new Oid("1.2.840.113554.1.2.2");
        KRB5_PRINCIPAL_NAME_TYPE = new Oid("1.2.840.113554.1.2.2.1");
        manager = GSSManager.getInstance();
    }


    public String getName() {
        return "GSSAPI (Java)";
    }

    public AuthenticationRequest startAuthentication(CredentialsCallback callback) throws LoginException, IOException {
        throw new LoginException("Not implemented");
    }

    public LoginComplete validateResponse(byte[] serverResponse) throws LoginException, IOException {
        throw new LoginException("Not implemented");
    }

    public String getServicePrincipalName() {
        String serverName = NetLoginPreferences.getInstance().getServer();
        String realmName = NetLoginPreferences.getInstance().getRealm();
        return "netlogin/" + serverName + "@" + realmName;
    }

	/**
	 * Set the desired flags in the context
     * @param context The context to setup.
     */
	protected void configureContext(GSSContext context) throws GSSException {
		context.requestMutualAuth(true); // mutual authentication
		context.requestConf(true); // confidentiality
		context.requestInteg(true); // integrity
		context.requestCredDeleg(false);
	}

	protected GSSContext establishContext(GSSCredential userCredentials, ObjectInputStream inStream, ObjectOutputStream outStream) throws IOException, GSSException {

		GSSName serverName = manager.createName(getServicePrincipalName(), KRB5_PRINCIPAL_NAME_TYPE);

		GSSContext context = manager.createContext(serverName,
				KRB5_MECHANISM,
				userCredentials,
				GSSContext.DEFAULT_LIFETIME);

		configureContext(context);

		// keep looping until a context is established
		byte[] inToken = new byte[0];
		while (!context.isEstablished()) {
			// generate a response
			byte[] outToken = context.initSecContext(inToken, 0, inToken.length);
			// send a token to the peer if one was generated by acceptSecContext
			if (outToken != null) {
				outStream.writeInt(outToken.length);
				outStream.write(outToken);
				outStream.flush();
			}
			// end condition
			if (context.isEstablished()) break;
			// read a token from the peer
			inToken = new byte[inStream.readInt()];
			inStream.readFully(inToken);
		}
		// return the established context
		return context;
	}
    
}
